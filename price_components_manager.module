<?php

define('COMMERCE_COMPONENT_PRICE_ORDER_TOTAL','commerce_component_price_order_total');
define('COMMERCE_ORDER_BASE_PRICE_COMPONENT','commerce_order_base_price_component');
define('COMMERCE_COMPONENT_PRICE_CART','commerce_component_price_order_cart');
define('COMMERCE_DISCOUNT_COMPONENT_PRICE_SETTINGS','commerce_discount_component_price_settings');
define('COMMERCE_ORDER_TVA_DISCOUNT_COMPONENTS', 'commerce_order_tva_discount_components');
/**
 * Implements hook_commerce_price_formatted_components_alter().
 */
function price_components_manager_commerce_price_formatted_components_alter(&$components, $price, $entity) {
    $types_order = variable_get(COMMERCE_COMPONENT_PRICE_ORDER_TOTAL,array());
    $base_price_types = variable_get(COMMERCE_ORDER_BASE_PRICE_COMPONENT, array());
    $vars_discount = variable_get(COMMERCE_DISCOUNT_COMPONENT_PRICE_SETTINGS,array());

    $BP = 0;
    if ( isset($components['base_price']) && !empty($components['base_price'])) {
        $BP += $components['base_price']['price']['amount'];
    }
    
    foreach ($components as $name => $component){
        if(array_key_exists($name,$base_price_types)){
            // Si Le component est bien à inclure dans le base_price
            $BP += $components[$name]['price']['amount'];

        }
        if (array_key_exists($name,$types_order)) {
            $components[$name]['weight'] = $types_order[$name]['weight'];
        }
        if (preg_match('/^(discount)/', $name)) {

            if (array_key_exists('discount',$types_order)) {
                $components[$name]['weight'] = $types_order['discount']['weight'];
            }
            if (array_key_exists('discount',$base_price_types)) {

                $BP += $components[$name]['price']['amount'];
            }
        }
    }

    if($BP){
        $components['base_price']['price']['amount']= $BP;
    }

}


/**
 * Implements hook_menu().
 */
function price_components_manager_menu()
{
    $items = array();
    $items['admin/commerce/config/order/price_components_options'] = array(
        'title' => 'Composants Prix',
        'description' => 'Gérer les composants du prix des commandes.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('price_components_manager_price_components_form'),
        'access arguments' => array('configure order settings'),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 10,
    );

    return $items;
}

/**
 * @param $form
 * @param $form_state
 */
function price_components_manager_price_components_form($form, &$form_state){
    $form['settings']['reorder_price_components'] = array(
        '#type' => 'item',
        '#title' => 'Ordre des Composants du Prix total de la Commande',
        '#tree' => TRUE,
        '#weight' => 5,
        '#theme' => 'custom_reorder_price_components_table'
    );
    $types = commerce_price_component_types();
    $types['commerce_price_formatted_amount'] = array(
        'title' =>'Total TTC',
        'display_title' => 'Total TTC',
        'weight' => 0,
        'name' => 'commerce_price_formatted_amount'
    );
    $orders = variable_get(COMMERCE_COMPONENT_PRICE_ORDER_TOTAL,array());

    foreach ($orders as $name => $order) {
        $types[$name]['weight'] = $order['weight'];
    }
    uasort($types,"drupal_sort_weight");
    foreach($types as $key => $component) {
        $form['settings']['reorder_price_components'][$key]['name'] = array(
            '#markup' => $component['title'],
        );
        $form['settings']['reorder_price_components'][$key]['weight'] = array(
            '#type' => 'textfield',
            '#default_value' => $component['weight'],
            '#size' => 3,
            '#attributes' => array('class' => array('rank-weight')), // needed for table dragging
        );
    }


$types_base_price = array();
    // On filtre pour enlever le base_price et la TVA.
    foreach($types as $key => $component) {
        if($key !== 'base_price' && preg_match('/^(tax)/', $key) == false && $key!== 'commerce_price_formatted_amount'){
            $types_base_price[$key] = $component['title'];
        }
    }
    $base_price_included = variable_get(COMMERCE_ORDER_BASE_PRICE_COMPONENT, array());
    $form['settings']['base_price_components'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Base Price Composants',
        '#options' => $types_base_price,
        '#default_value' => $base_price_included,
    );
    $form['settings']['base_price_components']['description'] = array(
        '#markup' => t('Les composants à inclure dans le montant du base price (total HT).'),
    );

    $types_tva = array();
    // On filtre pour ne garder que les composants de types Tax.
    foreach($types as $key => $component) {
        if(preg_match('/^(tax)/', $key) == TRUE){
            $types_tva[$key] = $component['display_title'];
        }
    }
    $tva_included = variable_get(COMMERCE_ORDER_TVA_DISCOUNT_COMPONENTS, array());
    $form['settings']['tva_components'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Remises & TVA Composants',
        '#options' => $types_tva,
        '#default_value' => $tva_included,
    );
    $form['settings']['tva_components']['description'] = array(
        '#markup' => t('Les TVA sélectionnées auront leurs montants recalculés pour prendre en compte les remises appliquées sur la commande globale.'),
    );


    $form['#submit'][] = "price_components_manager_price_components_form_submit";

    return system_settings_form($form);
}


/**
 * @param $form
 * @param $form_state
 */
function price_components_manager_price_components_form_submit(&$form, &$form_state) {

    $types = $form_state['values']['reorder_price_components'];
    uasort($types,"drupal_sort_weight");
    variable_set(COMMERCE_COMPONENT_PRICE_ORDER_TOTAL,$types);

    $include_base_price = array();
    $base_price_components = $form_state['values']['base_price_components'];
    foreach ($base_price_components as $component){
        if($component){
            $include_base_price[$component] = $component;
        }
    }
    variable_set(COMMERCE_ORDER_BASE_PRICE_COMPONENT,$include_base_price);

    $include_tva = array();
    $tva_components = $form_state['values']['tva_components'];
    foreach ($tva_components as $component){
        if($component){
            $include_tva[$component] = $component;
        }
    }
    variable_set(COMMERCE_ORDER_TVA_DISCOUNT_COMPONENTS,$include_tva);

}
/**
 * Implements hook_form_<FORM>_alter
 *
 * Add setting to print discount in its own line
 **/
function price_components_manager_form_commerce_discount_form_alter(&$form, &$form_state,$form_id) {
    $commerce_discount = $form_state['commerce_discount'];
    $vars = variable_get(COMMERCE_DISCOUNT_COMPONENT_PRICE_SETTINGS,array());
    $form['show_in_own_line'] = array(
        '#title' => t('Show this discount in its own line'),
        '#type' => 'radios',
        '#options' => array(
            1 => t('Yes'),
            0 => t('No'),
        ),
        '#required' => FALSE,
        '#default_value' => (array_key_exists($commerce_discount->name, $vars) ? $vars[$commerce_discount->name]['show_in_own_line'] :0),
    );
    $form["#submit"][] = 'price_components_manager_form_commerce_discount_form_submit';

}
/**
 * Submit callback for commerce_discount_form
 * Store settings to variables
 **/
function price_components_manager_form_commerce_discount_form_submit($form, $form_state) {
    $commerce_discount = $form_state['commerce_discount'];
    $vars = variable_get(COMMERCE_DISCOUNT_COMPONENT_PRICE_SETTINGS,array());
    $vars[$commerce_discount->name] = array("title" => $form_state['values']['label'], "show_in_own_line" => $form_state['values']['show_in_own_line']);
    variable_set(COMMERCE_DISCOUNT_COMPONENT_PRICE_SETTINGS, $vars);
}

/**
 * Implements hook_entity_presave
 *
 * Change titles and line item types for discount in own line
 * */
function price_components_manager_entity_presave($entity, $type) {
    $vars = variable_get(COMMERCE_DISCOUNT_COMPONENT_PRICE_SETTINGS,array());
    if (($type == "commerce_line_item" && $entity->type == "commerce_discount") || ($type == "commerce_order" && $entity->type == "commerce_order")) {
        if ($entity->type == "commerce_discount") {
            $field = &$entity->commerce_unit_price;
        }
        else {
            $field = &$entity->commerce_order_total;
        }
        foreach ($field['und'][0]['data']['components'] as $key => $component) {
            if (is_array($component['price']['data']) && array_key_exists("discount_name", $component['price']['data'])) {
                $name = $component['price']['data']['discount_name'];
                if (array_key_exists($name, $vars) && $vars[$name]['show_in_own_line']) {
                    $field['und'][0]['data']['components'][$key]['name'] = $component['price']['data']['discount_name'];
                    $entity->commerce_total['und'][0]['data']['components'][$key]['name'] = $component['price']['data']['discount_name'];
                }
            }
        }
    }

}

/**
 * Implements hook_entity_presave
 * @param $order
 *
 */
function price_components_manager_commerce_order_presave($order){

    //si la commande a des remises
    if(isset($order->commerce_discounts)){
        $vars_tva = variable_get(COMMERCE_ORDER_TVA_DISCOUNT_COMPONENTS,array());

        $pdiscount = 0;
        $TVA = array();
        //on parcourt les composants de prix à la recherche des remises et des tva à traiter
        foreach($order->commerce_order_total['und'][0]['data']['components'] as $key=>$valeur){
            if (array_key_exists($valeur['name'],$vars_tva)) {
                $TVA[$valeur['name']] = array(
                    'key' => $key,
                    'taux_tva' => $valeur['price']['data']['tax_rate']['rate'],
                    'montant_tva' => $valeur['price']['amount'],
                );
            }

            //si le composant est une remise
            if(strpos($valeur['name'], 'discount') !== false){
                //on garde et cumule (si autres remises) le montant
                $pdiscount = $pdiscount + abs($valeur['price']['amount']);
            }
        }

        //si on a bien trouvé nos remises dans les composants
        if($pdiscount){
            $tva_total_remise = 0;
            if($TVA){
                foreach ($TVA as $name => $item) {
                    //on calcule la TVA de(s) remise(s)
                    $tvaremise = round($pdiscount*$item['taux_tva']);
                    //pour pouvoir calculer la TVA avec remise
                    $goodtva = $item['montant_tva'] - $tvaremise;
                    $tva_total_remise += $tvaremise;
                    //on met à jour la TVA
                    $order->commerce_order_total['und'][0]['data']['components'][$item['key']]['price']['amount'] = $goodtva;
                }
            }

            //et on met à jour le montant total en enlevant toutes les montants de TVA remises.
            $order->commerce_order_total['und'][0]['amount'] = $order->commerce_order_total['und'][0]['amount'] - $tva_total_remise;
        }
    }
    //on retourne notre commande modifiée !
    return $order;
}


/**
 * Implements hook_form_<FORM>_alter
 *
 * Add draggable table to cart pane to reorder component_price components
 **/

function price_components_manager_form_commerce_checkout_pane_settings_form_alter(&$form, &$form_state) {
    if ($form['checkout_pane']['#value']['base'] == 'commerce_cart_contents_pane') {
        $form['settings']['reorder_price_components'] = array(
            '#type' => 'item',
            '#title' => 'Order price components',
            '#tree' => TRUE,
            '#weight' => 5,
            '#theme' => 'custom_reorder_price_components_table'
        );
        $types = commerce_price_component_types();
        $orders = variable_get(COMMERCE_COMPONENT_PRICE_CART,array());
        foreach ($orders as $name => $order) {
            $types[$name]['weight'] = $order['weight'];
        }
        uasort($types,"drupal_sort_weight");
        foreach($types as $key => $component) {
            $form['settings']['reorder_price_components'][$key]['name'] = array(
                '#markup' => $component['title'],
            );
            $form['settings']['reorder_price_components'][$key]['weight'] = array(
                '#type' => 'textfield',
                '#default_value' => $component['weight'],
                '#size' => 3,
                '#attributes' => array('class' => array('rank-weight')), // needed for table dragging
            );
        }
        $form['submit']['#submit'][] = "price_components_manager_form_commerce_cart_contents_pane_submit";
    }
}

/**
 * Submit callback for  commerce_checkout_pane_settings_form
 * Store new order in variables
 **/
function price_components_manager_form_commerce_cart_contents_pane_submit(&$form, &$form_state) {
    $types = $form_state['values']['reorder_price_components'];
    uasort($types,"drupal_sort_weight");
    variable_set(COMMERCE_COMPONENT_PRICE_CART,$types);
}

/**
 *Implements hook_theme
 **/
function price_components_manager_theme($existing, $type, $theme, $path) {
    return array(
        'custom_reorder_price_components_table' => array(
            'render element' => 'element'
        ),
    );
}

/**
 * Theme for rendering component prices ordering
 **/
function theme_custom_reorder_price_components_table($vars) {
    $element = $vars['element'];
    drupal_add_tabledrag('custom_reorder_price_form', 'order', 'sibling', 'rank-weight'); // needed for table
    // dragging

    $header = array(
        'name' => t('Name'),
        'weight' => t('Rank'),
    );

    $rows = array();
    foreach (element_children($element) as $key) {
        $row = array();

        $row['data'] = array();
        foreach ($header as $fieldname => $title) {
            $row['data'][] = drupal_render($element[$key][$fieldname]);
            $row['class'] = array('draggable'); // needed for table dragging
        }
        $rows[] = $row;
    }

    return theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array('id' => 'custom_reorder_price_form'), // needed for table dragging
    ));
}


